{{- if include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.MachineKeyPath")) -}}
{{- fail "Specifying .Values.zitadel.configmapConfig.FirstInstance.MachineKeyPath is not supported" -}}
{{- end -}}
{{- if include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.PatPath")) -}}
{{- fail "Specifying .Values.zitadel.configmapConfig.FirstInstance.PatPath is not supported" -}}
{{- end -}}
{{- if include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.LoginClientPatPath")) -}}
{{- fail "Specifying .Values.zitadel.configmapConfig.FirstInstance.LoginClientPatPath is not supported" -}}
{{- end -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "zitadel.fullname" . }}-setup"
  labels:
    {{- include "zitadel.setup.labels" . | nindent 4 }}
    {{- with .Values.setupJob.annotations }}
  annotations:
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  backoffLimit: {{ .Values.setupJob.backoffLimit }}
  activeDeadlineSeconds: {{ .Values.setupJob.activeDeadlineSeconds }}
  template:
    metadata:
      labels:
        {{- include "zitadel.setup.labels" . | nindent 8 }}
        {{- with .Values.setupJob.podAdditionalLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.setupJob.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zitadel.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      enableServiceLinks: false
      restartPolicy: Never
      {{- if or .Values.zitadel.initContainers .Values.setupJob.initContainers }}
      initContainers:
      {{- with .Values.zitadel.initContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.setupJob.initContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      containers:
      {{- if .Values.zitadel.extraContainers }}
        {{- toYaml .Values.zitadel.extraContainers | nindent 8 }}
      {{- end }}
      {{- if .Values.setupJob.extraContainers }}
        {{- toYaml .Values.setupJob.extraContainers | nindent 8 }}
      {{- end }}
        - name: "{{ .Chart.Name }}-setup"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 14 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - setup
            - --masterkeyFromEnv
            - --config
            - /config/zitadel-config-yaml
            - --steps
            - /config/zitadel-config-yaml
            {{- if .Values.zitadel.secretConfig }}
            - --config
            - /zitadel-secrets-yaml/zitadel-secrets-yaml
            - --steps
            - /zitadel-secrets-yaml/zitadel-secrets-yaml
            {{- end }}
            {{- if and .Values.zitadel.configSecretName .Values.zitadel.configSecretKey }}
            - --config
            - /zitadel-secret-config-yaml/{{ .Values.zitadel.configSecretKey }}
            - --steps
            - /zitadel-secret-config-yaml/{{ .Values.zitadel.configSecretKey }}
            {{- end }}
            {{- if .Values.setupJob.additionalArgs }}
            {{- toYaml .Values.setupJob.additionalArgs | nindent 12 }}
            {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: ZITADEL_MASTERKEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "zitadel.masterkeySecretName" . }}
                  key: masterkey
            - name: ZITADEL_FIRSTINSTANCE_MACHINEKEYPATH
              value: "/machinekey/sa.json"
            {{- if and (not .Values.zitadel.configmapConfig.FirstInstance.Skip) (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.Machine.Pat"))) }}
            - name: ZITADEL_FIRSTINSTANCE_PATPATH
              value: "/machinekey/pat"
            {{- end }}
            - name: ZITADEL_FIRSTINSTANCE_LOGINCLIENTPATPATH
              value: "/login-client/pat"
            {{- $dbEnv := get (include "zitadel.dbkey.json" . | fromJson) "env" }}
            {{- if (or .Values.zitadel.dbSslCaCrt .Values.zitadel.dbSslCaCrtSecret) }}
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_ROOTCERT
              value: /db-ssl-ca-crt/ca.crt
            {{- end }}
            {{- if .Values.zitadel.dbSslUserCrtSecret }}
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_CERT
              value: /db-ssl-user-crt/tls.crt
            - name: ZITADEL_DATABASE_{{ $dbEnv }}_USER_SSL_KEY
              value: /db-ssl-user-crt/tls.key
            {{- end}}
            {{- with .Values.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.envVarsSecret }}
          envFrom:
            - secretRef:
                name: {{ .Values.envVarsSecret }}
          {{- end }}
          volumeMounts:
          - name: zitadel-config-yaml
            mountPath: /config
            readOnly: true
          {{- if .Values.zitadel.secretConfig }}
          - name: zitadel-secrets-yaml
            mountPath: /zitadel-secrets-yaml
            readOnly: true
          {{- end }}
          {{- if .Values.zitadel.configSecretName }}
          - name: zitadel-secret-config-yaml
            mountPath: /zitadel-secret-config-yaml
            readOnly: true
          {{- end }}
          {{- if (or .Values.zitadel.dbSslCaCrt .Values.zitadel.dbSslCaCrtSecret) }}
          - name: db-ssl-ca-crt
            mountPath: /db-ssl-ca-crt
            readOnly: true
          {{- end }}
          {{- if .Values.zitadel.dbSslUserCrtSecret }}
          - name: db-ssl-user-crt
            mountPath: /db-ssl-user-crt
            readOnly: true
          {{- end }}
          {{- if include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.Machine")) }}
          - name: machinekey
            mountPath: "/machinekey"
          {{- end}}
          {{- if include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.LoginClient")) }}
          - name: login-client
            mountPath: "/login-client"
          {{- end}}
          {{- with .Values.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
          resources:
            {{- toYaml .Values.setupJob.resources | nindent 12 }}
        {{- if and (not .Values.zitadel.configmapConfig.FirstInstance.Skip) (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.Machine"))) }}
        - name: "{{ .Chart.Name}}-machinekey"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 14 }}
          image: "{{ .Values.setupJob.machinekeyWriter.image.repository }}:{{ .Values.setupJob.machinekeyWriter.image.tag | default (.Capabilities.KubeVersion.GitVersion | trimPrefix "v") }}"
          command:
            - sh
            - -c
            - |
              #!/bin/sh
              set -e

              NAMESPACE="{{ .Release.Namespace }}"
              SECRET_NAME="{{ .Values.zitadel.configmapConfig.FirstInstance.Org.Machine.Machine.Username }}"
              KEY_FILE_PATH="/machinekey/sa.json"
              MAIN_CONTAINER_NAME="{{ .Chart.Name }}-setup"

              echo "Waiting for main container '${MAIN_CONTAINER_NAME}' to terminate..."

              while [ -z "$(kubectl --namespace="${NAMESPACE}" get pod "${POD_NAME}" --output=jsonpath="{.status.containerStatuses[?(@.name=='${MAIN_CONTAINER_NAME}')].state.terminated}")" ]; do
                sleep 5
              done

              echo "Main container has terminated."

              if [ -f "${KEY_FILE_PATH}" ]; then
                echo "File found at '${KEY_FILE_PATH}'. Creating secret..."
                kubectl --namespace="${NAMESPACE}" \
                  create secret generic "${SECRET_NAME}" \
                  --from-file="${SECRET_NAME}.json=${KEY_FILE_PATH}"
                echo "Secret '${SECRET_NAME}' created successfully."
              else
                echo "File NOT found at '${KEY_FILE_PATH}'. Setup cannot continue."
                exit 1
              fi
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: machinekey
              mountPath: "/machinekey"
              readOnly: true
          resources:
          {{- if .Values.setupJob.machinekeyWriter.resources }}
            {{- toYaml .Values.setupJob.machinekeyWriter.resources | nindent 12 }}
          {{- else }}
            {{- toYaml .Values.setupJob.resources | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if and (not .Values.zitadel.configmapConfig.FirstInstance.Skip) (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.Machine.Pat"))) }}
        - name: "{{ .Chart.Name }}-machine-pat"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 14 }}
          image: "{{ .Values.setupJob.machinekeyWriter.image.repository }}:{{ .Values.setupJob.machinekeyWriter.image.tag | default (.Capabilities.KubeVersion.GitVersion | trimPrefix "v") }}"
          command:
            - sh
            - -c
            - |
              #!/bin/sh
              set -e

              NAMESPACE="{{ .Release.Namespace }}"
              SECRET_NAME="{{ .Values.zitadel.configmapConfig.FirstInstance.Org.Machine.Machine.Username }}-pat"
              PAT_FILE_PATH="/machinekey/pat"
              MAIN_CONTAINER_NAME="{{ .Chart.Name }}-setup"

              echo "Waiting for main container '${MAIN_CONTAINER_NAME}' to terminate..."

              while [ -z "$(kubectl --namespace="${NAMESPACE}" get pod "${POD_NAME}" --output=jsonpath="{.status.containerStatuses[?(@.name=='${MAIN_CONTAINER_NAME}')].state.terminated}")" ]; do
                sleep 5
              done

              echo "Main container has terminated."

              if [ -f "${PAT_FILE_PATH}" ]; then
                echo "File found at '${PAT_FILE_PATH}'. Creating secret..."
                kubectl --namespace="${NAMESPACE}" \
                  create secret generic "${SECRET_NAME}" \
                  --from-file="${PAT_FILE_PATH}"
                echo "Secret '${SECRET_NAME}' created successfully."
              else
                echo "File NOT found at '${PAT_FILE_PATH}'. Setup cannot continue."
                exit 1
              fi
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: machinekey
              mountPath: "/machinekey"
              readOnly: true
          resources:
          {{- if .Values.setupJob.machinekeyWriter.resources }}
            {{- toYaml .Values.setupJob.machinekeyWriter.resources | nindent 12 }}
          {{- else }}
            {{- toYaml .Values.setupJob.resources | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if and (not .Values.zitadel.configmapConfig.FirstInstance.Skip) (include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.LoginClient"))) }}
        - name: "{{ .Chart.Name}}-login-client-pat"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 14 }}
          image: "{{ .Values.setupJob.machinekeyWriter.image.repository }}:{{ .Values.setupJob.machinekeyWriter.image.tag | default (.Capabilities.KubeVersion.GitVersion | trimPrefix "v") }}"
          command:
            - sh
            - -c
            - |
              #!/bin/sh
              set -e

              NAMESPACE="{{ .Release.Namespace }}"
              SECRET_NAME="{{ .Values.login.loginClientSecretPrefix }}login-client"
              PAT_FILE_PATH="/login-client/pat"
              MAIN_CONTAINER_NAME="{{ .Chart.Name }}-setup"

              echo "Waiting for main container '${MAIN_CONTAINER_NAME}' to terminate..."

              while [ -z "$(kubectl --namespace="${NAMESPACE}" get pod "${POD_NAME}" --output=jsonpath="{.status.containerStatuses[?(@.name=='${MAIN_CONTAINER_NAME}')].state.terminated}")" ]; do
                sleep 5
              done

              echo "Main container has terminated."

              if [ -f "${PAT_FILE_PATH}" ]; then
                echo "File found at '${PAT_FILE_PATH}'. Creating secret..."
                kubectl --namespace="${NAMESPACE}" \
                  create secret generic "${SECRET_NAME}" \
                  --from-file="${PAT_FILE_PATH}"
                echo "Secret '${SECRET_NAME}' created successfully."
              else
                echo "File NOT found at '${PAT_FILE_PATH}'. Setup cannot continue."
                exit 1
              fi
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: login-client
              mountPath: "/login-client"
              readOnly: true
          resources:
          {{- if .Values.setupJob.machinekeyWriter.resources }}
            {{- toYaml .Values.setupJob.machinekeyWriter.resources | nindent 12 }}
          {{- else }}
            {{- toYaml .Values.setupJob.resources | nindent 12 }}
          {{- end }}
      {{- end }}
      volumes:
      - name: zitadel-config-yaml
        configMap:
          name: {{ include "zitadel.configmapName" . }}
          defaultMode: 0440
      {{- if .Values.zitadel.secretConfig }}
      - name: zitadel-secrets-yaml
        secret:
          secretName: {{ include "zitadel.secretName" . }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.zitadel.configSecretName }}
      - name: zitadel-secret-config-yaml
        secret:
          secretName: {{ .Values.zitadel.configSecretName }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.zitadel.dbSslCaCrt }}
      - name: db-ssl-ca-crt
        secret:
          secretName: {{ include "zitadel.dbSslCaCrtSecretName" . }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.zitadel.dbSslCaCrtSecret }}
      - name: db-ssl-ca-crt
        secret:
          secretName: {{ .Values.zitadel.dbSslCaCrtSecret }}
          defaultMode: 0440
      {{- end }}
      {{- if .Values.zitadel.dbSslUserCrtSecret }}
      - name: db-ssl-user-crt
        secret:
          secretName: {{ .Values.zitadel.dbSslUserCrtSecret }}
          defaultMode: 0440
      {{- end }}
      {{- if include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.Machine")) }}
      - name: machinekey
        emptyDir: { }
      {{- end }}
      {{- if include "deepCheck" (dict "root" .Values "path" (splitList "." "zitadel.configmapConfig.FirstInstance.Org.LoginClient")) }}
      - name: login-client
        emptyDir: { }
      {{- end }}
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
